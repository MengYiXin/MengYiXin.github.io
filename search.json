[{"title":"important-link","url":"/2021/11/07/important-link/","content":"link:\nVMware不同版本的对比：https://www.vmware.com/products/vsphere.htmlVMware iso lenovo OEM下载地址：https://vmware.lenovo.com/content/custom_iso/VMware版本KB：https://kb.vmware.com/s/article/2143838 （vcenter）https://kb.vmware.com/s/article/2143832（ESXi）VMware vcenter下载：需要vmware官网账号联想机型兼容性查询：https://lenovopress.com/osigVMware兼容性列表查询：http://partnerweb.vmware.com/comp_guide2/search.php?action=base&amp;deviceCategory=ioLenovo固件下载地址：https://datacentersupport.lenovo.com/cn/en/\n","tags":["VMware"]},{"title":"Linux的学习","url":"/2021/05/04/Linux/","content":"Linux学习： https://www.shiyanlou.com/courses/1 http://linuxcommand.org/tlcl.php http://www.imooc.com/read/39 https://fanzhongwei.com/linux/shadowsocks.html\n","tags":["Linux"]},{"title":"K8S学习","url":"/2021/05/04/k8s-%E7%BA%AA%E6%B3%BD/","content":"以下是我个人对学习 k8s 的意见，很多资料都涉及网络（自行解决）和英文（google翻译）：\n\n仅以 k8s 官方文档作为参考手册，尽量不看中文博客（具有局限性和滞后性，多数都有错误）官方文档： https://kubernetes.io/docs/home/\n\n（初步了解它能做什么）先了解基本概念，然后动手实践\n  建议用官方的 tutorial 做实践内容：https://kubernetes.io/docs/tutorials/  建议用本地环境做实践环境，可以用 Minikube 或者 Kind, 我建议用kind：https://github.com/kubernetes-sigs/kind  建议把 https://www.katacoda.com/ 的实验做一遍\n\n进一步了解Kubernetes的架构、理念及组件\n  3.1 部署方案（下面都是针对on-premise方案，如果能用 cloud，建议优先考虑cloud）：   只建议用官方文档推荐的方案\n\n\nhttps://kubernetes.io/docs/setup/production-environment/\n多数情况下我都建议用 kubeadm 做部署         \n\n  如果有兴趣可以看 https://github.com/kelseyhightower/kubernetes-the-hard-way，可以深入理解 k8s 的组件及组件关系大规模部署交付建议考虑 kubespray\n 3.2 较为系统的了解 k8s 的 concepts、glossary，这些在官方文档中都有，建议自行查找（用于练习文档查阅能力，k8s的CKA认证就是开卷考试，所有内容都可以在官方文档中找到参考）\n\n 3.3 继续多做练习，比如官网的 tasks\n\n\n了解 K8S 的生态，包括 CRI、CNI、CSI、可观测性等，建议通过 CNCF 全景图找感兴趣的部分，具体情况可以找我沟通。 https://landscape.cncf.io/\n\n多看k8s 博客（https://kubernetes.io/blog/）及cncf博客（ https://www.cncf.io/blog/ ），都是大厂分享理念和实践\n\n\n","tags":["K8S"]},{"title":"Python Day0","url":"/2021/05/02/simpread-Python%20%E5%AD%A6%E4%B9%A0%20-Day0%EF%BC%882021.2.23%EF%BC%89_Yixin%20%E7%9A%84%E5%8D%9A%E5%AE%A2%20-%20CSDN%20%E5%8D%9A%E5%AE%A2/","content":"今天玲姐带我们学习 Python，启动。\n讲明了学习的计划与方法，并且分享了相关的文件。\n建了微信群众，从此每天写点代码，进行 Python 学习。\n玲姐:1.gitlab 地址是 gitlab.vthink.cloud没有注册过的，先注册一下，注册完成后，我会拉到 SRE group，然后就可以下载代码了2. learning-python 库的地址是：http://gitlab.vthink.cloud/sre/learning-python.git  \n \nAnaconda:  https://www.anaconda.com/products/individual https://www.anaconda.com/products/individual \nPycharm:  https://www.jetbrains.com/pycharm/download/#section=windows https://www.jetbrains.com/pycharm/download/#section=windows\n配置好了编辑器与 Gitlab 仓库\n建立了 SRE group，用 git 提交代码。\n\n其实以前学过 Python，但是都是皮毛。这次趁着有人带，想好好学习一下。\n\n","tags":["Python"]},{"title":"Python Day1","url":"/2021/05/02/simpread-Python%20%E5%AD%A6%E4%B9%A0%20-Day1%EF%BC%882021.2.24%EF%BC%89_Yixin%20%E7%9A%84%E5%8D%9A%E5%AE%A2%20-%20CSDN%20%E5%8D%9A%E5%AE%A2/","content":"# 试试变量x &#x3D; 3print(x) 幸运数 &#x3D; 1997 print(幸运数) name &#x3D; &#39;yixin&#39;print(name) # 试试基本的数据类型# 整数（int) 浮点型（float） 字符串（str) 布尔值（bool) # 1, 空（NoneTypesome &#x3D; Noneprint(type(some)) # 2, 布尔型（bool)some &#x3D; Trueprint(type(some)) # 3,整形（int）some &#x3D; 12345print(type(some)) # 4,浮点型（float）some &#x3D; 12.345print(type(some)) # 字符串（str）some &#x3D; &#39;abc&#39;print(type(some)) print(type(8)) counter &#x3D; 100  # 整型变量miles &#x3D; 1000.0  # 浮点型变量name &#x3D; &quot;runoob&quot;  # 字符串 print(counter)print(miles)print(name)  x &#x3D; 3y &#x3D; 5x,y &#x3D; y,x print(x,y) # 字符串的特性# 1,Python中单引号和双引号使用完全相同m &#x3D; &#39;abc&#39;n &#x3D; &quot;abc&quot;q &#x3D; (m &#x3D;&#x3D; n)print(q) # 2,使用三引号 （&#39;&#39;&#39;或 &#39;&#39;&#39;）some &#x3D; &#39;&#39;&#39; abc def gbk lll&#39;&#39;&#39;print(some) # 3，转义符’\\‘some &#x3D; &#39;abc\\n def&#39;print(some) # 4,自然字符串，通过在字符串前加r或者R，可以忽略转义符some &#x3D; r&#39;abc\\n def&#39;print(some) # 5，python 允许处理unicode字符串，加前缀u或者U \n\n\n\n","tags":["Python"]},{"title":"Python Day2","url":"/2021/05/02/simpread-Python%20%E5%AD%A6%E4%B9%A0%20-Day2%EF%BC%882021.2.25%EF%BC%89_Yixin%20%E7%9A%84%E5%8D%9A%E5%AE%A2%20-%20CSDN%20%E5%8D%9A%E5%AE%A2/","content":"# 标准数据类型import math &quot;&quot;&quot;Number(数字)String(字符串)List(列表)Tuple(元组)Set(集合)Dictionary(字典)可变数据（3个）：List(列表)，Dictionary(字典)，Set(集合)代码风格整理： Ctrl + Alt +l&quot;&quot;&quot; a, b, c, d &#x3D; 20, 5.5, True, 4 + 3j print(type(a)), print(type(b)), print(type(c)), print(type(d))# # ------------------------------------------------------------------------## # 此外还可以用 isinstance 来判断：# a &#x3D; 111# isinstance(a, int)## # isinstance 和 type 的区别在于：# &#39;&#39;&#39;# type()不会认为子类是一种父类类型。# isinstance()会认为子类是一种父类类型。# &#39;&#39;&#39;### class A:#     pass### class B(A):#     pass### isinstance(A(), A)## type(A()) &#x3D;&#x3D; A## isinstance(B(), A)## type(B()) &#x3D;&#x3D; A# ------------------------------------------------------------------------# # 数值运算： 5 + 4  # 加法 4.3 - 2  # 减法\n\n\n\n","tags":["Python"]},{"title":"Python Day3","url":"/2021/05/02/simpread-Python%20%E5%AD%A6%E4%B9%A0%20-Day3%EF%BC%882021.2.26%EF%BC%89_Yixin%20%E7%9A%84%E5%8D%9A%E5%AE%A2%20-%20CSDN%20%E5%8D%9A%E5%AE%A2/","content":"# Python的数据结构有三种:列表、元组和字典  # 列表（list）# 初始化：[],[1,3,7],[&#39;a&#39;,&#39;c&#39;],[1,&#39;s&#39;,&#39;des&#39;,256]等# 1，增加：append(value),extend(list2),insert(i,value) mylist &#x3D; [1, 3, 7]mylist.append(&#39;a&#39;)mylist.insert(2, &#39;fff&#39;)print(mylist) newList &#x3D; [&#39;abc&#39;, &#39;kkk&#39;, 123]mylist.extend(newList)print(mylist) # 2,删除：pop([i]）,remove（value）# i 可以是负数# i 超出范围会报out of range错误# remove只会移除第一个遇到的值# pop 有返回值，remove没有 mylist &#x3D; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]a &#x3D; mylist.pop()print(a)print(mylist)b &#x3D; mylist.pop(2)print(b)print(mylist)c &#x3D; mylist.pop(-1)print(c)print(mylist)newList &#x3D; [&#39;a&#39;, &#39;b&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;]k &#x3D; newList.remove(&#39;b&#39;)print(k)print(newList) # 3.查询:index(value, [start, [stop]])　　# ---返回列表中第一个出现的值为value的索引，如果没有，则异常 ValueError mylist &#x3D; [1, 2, 5]a &#x3D; mylist.index(2)print(a)&#39;b &#x3D; mylist.index(3)  # 此处会报错，返回以下信息&#39; # Traceback (most recent call last):#   File &quot;C:&#x2F;Users&#x2F;mengyx3&#x2F;Desktop&#x2F;Python learning&#x2F;learning-python&#x2F;mengyixin&#x2F;day3.py&quot;, line 44, in &lt;module&gt;#     b &#x3D; mylist.index(3)# ValueError: 3 is not in list &quot;&quot;&quot;4.修改:list没有直接修改对应元素的方法，   只能先找到目标元素所在位置，然后直接赋值&quot;&quot;&quot; mylist &#x3D; [&#39;a&#39;, &#39;k&#39;, &#39;m&#39;]myIndex &#x3D; mylist.index(&#39;k&#39;)mylist[myIndex] &#x3D; &#39;fff&#39;print(mylist) # 5.排序:sort() mylist &#x3D; [6, 23, 7, 39, 1, 90]mylist.sort()print(mylist) # 6.反转：reverse() mylist &#x3D; [&#39;f&#39;, &#39;m&#39;, &#39;a&#39;, &#39;z&#39;]mylist.reverse()print(mylist) # 清空：clear() mylist &#x3D; [1, 2, 4]mylist.clear()print(mylist) \n\n\n","tags":["Python"]},{"title":"Python Day4","url":"/2021/05/02/simpread-Python%20%E5%AD%A6%E4%B9%A0%20-Day4%EF%BC%882021.3.1%EF%BC%89_Yixin%20%E7%9A%84%E5%8D%9A%E5%AE%A2%20-%20CSDN%20%E5%8D%9A%E5%AE%A2/","content":"# 字典（dict）# 　定义:键值对集合## 　　初始化:&#123;&#125;, &#123;&#39;1&#39; : &#39;abc&#39;, &#39;2&#39; : &#39;def&#39;&#125;## 　　1.增加:单个数据直接赋值 #    update(dict2)　　---把dict2的元素加入到dict中去，键字重复时会覆盖dict中的键值 myd &#x3D; &#123;&#125; myd[&#39;1&#39;] &#x3D; &#39;one&#39; print(myd) myd1 &#x3D; &#123;1: &#39;one&#39;, 2: &#39;two&#39;&#125;myd2 &#x3D; &#123;1: &#39;one&#39;, 3: &#39;three&#39;&#125;myd1.update(myd2)print(myd1) #     2,删除:pop(key, [default])　　---若字典中key键存在，删除并返回dict[key]，若不存在，且未给出default值，引发KeyError异常## 　　　　　popitem()　　---删除任意键值对，并返回该键值对，如果字典为空，则产生异常KeyError## 　　　　　clear()  ---略 myd &#x3D; &#123;1: &quot;one&quot;, 2: &quot;two&quot;, 3: &quot;there&quot;&#125;item &#x3D; myd.pop(1)print(item)print(myd)newItem &#x3D; myd.popitem()print(newItem) print(myd) #     3,查询：get(key,[default])　　---返回字典dict中键key对应值，如果字典中不存在此键，则返回default 的值(default默认值为None)## 　　　　　　items()　　---返回一个包含字典中(键, 值)对元组的列表## 　　　　　　keys()　　---返回一个包含字典中所有键的列表## 　　　　　　values()　　---返回一个包含字典中所有值的列表#myd &#x3D; &#123;1: &quot;one&quot;, 2: &quot;two&quot;, 3: &quot;there&quot;&#125;print(myd.get(2)) print(myd.items()) print(myd.keys())print(myd.values())\n\n\n","tags":["Python"]},{"title":"Python Day6","url":"/2021/05/02/simpread-Python%20%E5%AD%A6%E4%B9%A0%20-Day6%EF%BC%882021.3.3%EF%BC%89_Yixin%20%E7%9A%84%E5%8D%9A%E5%AE%A2%20-%20CSDN%20%E5%8D%9A%E5%AE%A2/","content":"函数\n# 函数# 函数是可重复调用的代码段，能提高代码的复用率。 # 无参数def print_hello():    print (&quot;hello&quot;)  print_hello()  # 带参数def print_str(s):    print(s)    return s * 2  print_str(&quot;fuck&quot;)  # 带默认参数def print_default(s&#x3D;&quot;hello&quot;):    print(s)  print_default()print_default(&quot;default&quot;)  # 不定长参数def print_args(s, *arg):    print(s)    for a in arg:        print(a)    return  print_args(&quot;hello&quot;)print_args(&quot;hello&quot;, &quot;world&quot;, &quot;1&quot;)  # 参数次序可以变def print_two(a, b):    print(a, b)  print_two(a&#x3D;&quot;a&quot;, b&#x3D;&quot;b&quot;)print_two(b&#x3D;&quot;b&quot;, a&#x3D;&quot;a&quot;)","tags":["Python"]},{"title":"Python Day7","url":"/2021/05/02/simpread-Python%20%E5%AD%A6%E4%B9%A0%20-Day7%EF%BC%882021.3.4%EF%BC%89_Yixin%20%E7%9A%84%E5%8D%9A%E5%AE%A2%20-%20CSDN%20%E5%8D%9A%E5%AE%A2/","content":"集合# 模块# 通常来说，比较正规的工程不会把所有代码放在一个py文件里，我们会把代码拆成各个模块，分别调用。对python来说，拆成各个模块可以看做拆成各个py文件。  # 搜索路径# 通常来说，同文件夹下的py文件可以直接import。 def print_hello():    print(&quot;hello&quot;)  # 我们把这个保存至hello.pyimport hello hello.print_hello() # 在run.py里import，然后调用print_hello() 目录结构# .....&#x2F; hello.pyrun.py # hello.py和run.py在同一目录下，可以直接import 如果在不同路径下，可以在sys.path里手动加入你想import的路径 import sys sys.path.append(&#39;&#x2F;home&#x2F;yixin&#x2F;course&#39;)import hello hello.print_hello()# 如果run.py不在&#x2F;home&#x2F;yixin&#x2F;course文件夹下，手动加入这个路径，就可以import这个路径下的hello.py # ----------------------------------------------------------------------------------------------------# 通常一个工程不可能只有一层目录结构，并且也不会一个一个path去append到sys里，常用的做法是包，一个目录及其子目录组成的一个包（可以看做一个库）。 举个例子#&quot;&quot;&quot;&#x2F;home&#x2F;yixin&#x2F;course├── __init__.py├── __init__.pyc├── m1│   ├── b.py│   ├── b.pyc│   ├── __init__.py│   ├── __init__.pyc│   └── m1_1│       ├── a.py│       ├── a.pyc│       ├── __init__.py│       └── __init__.pyc└── m2    ├── __init__.py    └── run.py&quot;&quot;&quot;","tags":["Python"]},{"title":"Python Day5","url":"/2021/05/02/simpread-Python%20%E5%AD%A6%E4%B9%A0%20-Day5%EF%BC%882021.3.2%EF%BC%89_Yixin%20%E7%9A%84%E5%8D%9A%E5%AE%A2%20-%20CSDN%20%E5%8D%9A%E5%AE%A2/","content":"集合\nbasket &#x3D; &#123;&#39;apple&#39;, &#39;orange&#39;, &#39;apple&#39;, &#39;pear&#39;, &#39;orange&#39;, &#39;banana&#39;&#125;print(basket)  # 这里演示的是去重功能&#123;&#39;orange&#39;, &#39;banana&#39;, &#39;pear&#39;, &#39;apple&#39;&#125;&#39;orange&#39; in basket  # 快速判断元素是否在集合内True&#39;crabgrass&#39; in basketFalse # 下面展示两个集合间的运算. a &#x3D; set(&#39;abracadabra&#39;)b &#x3D; set(&#39;alacazam&#39;)a&#123;&#39;a&#39;, &#39;r&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;&#125;a - b  # 集合a中包含而集合b中不包含的元素&#123;&#39;r&#39;, &#39;d&#39;, &#39;b&#39;&#125;a | b  # 集合a或b中包含的所有元素&#123;&#39;a&#39;, &#39;c&#39;, &#39;r&#39;, &#39;d&#39;, &#39;b&#39;, &#39;m&#39;, &#39;z&#39;, &#39;l&#39;&#125;a &amp; b  # 集合a和b中都包含了的元素&#123;&#39;a&#39;, &#39;c&#39;&#125;a ^ b  # 不同时包含于a和b的元素&#123;&#39;r&#39;, &#39;d&#39;, &#39;b&#39;, &#39;m&#39;, &#39;z&#39;, &#39;l&#39;&#125;","tags":["Python"]},{"title":"VMWare vCenter Server 的安装","url":"/2021/05/02/simpread-VMWare%20vCenter%20Server%20%E7%9A%84%E5%AE%89%E8%A3%85_Yixin%20%E7%9A%84%E5%8D%9A%E5%AE%A2%20-%20CSDN%20%E5%8D%9A%E5%AE%A2/","content":"从 ESXI 中，删除 Vcenter 虚拟机本身，然后全部进行重装一遍。熟悉流程2020/7/22\n具体虚拟机进入操作系统的密码\n\n","tags":["VMware"]},{"title":"Python学习资料","url":"/2021/05/02/simpread-Python%20%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99_Yixin%20%E7%9A%84%E5%8D%9A%E5%AE%A2%20-%20CSDN%20%E5%8D%9A%E5%AE%A2/","content":"https://edu.csdn.net/course/detail/25411\n复制粘贴在浏览器打开\n好几个小节，目录可选\nhttps://blog.csdn.net/weixin_44888486/article/details/102902402\n上面针对 Python 基础的内容总结\n包含环境的搭建及安装步骤\n环境安装：\npython 及 pycharm 安装包，已经上传了\n根据自己的电脑系统选择下载就好了哈\n链接: https://pan.baidu.com/s/1tYITGogujLZxm3C-W8SlzQ\n提取码: n2p2\nhttps://pan.baidu.com/s/1G9-2Tv8wSbsikTvs7QzGcg     Mac\nPython 的安装：https://blog.csdn.net/weixin_43495473/article/details/103559812\nPycharm 的安装：https://blog.csdn.net/weixin_43495473/article/details/103560198\n网盘里是安装包，下面是安装步骤\nPython 零基础入门\n从游戏开始的 “0 基础 Python 学习之路”【5-27】\n观看链接：https://live.csdn.net/room/CSDNedu/NgQZAWBq\nPython 爬虫\nPython 分布式爬虫 + 数据分析实战【5-26】\n观看链接：https://live.csdn.net/room/CSDNedu/YceylATu\nPython 自动化\nPython 自动化办公【6-17】\n观看链接：https://live.csdn.net/room/CSDNedu/w7Ifsyx5\nPython 数据分析\nPython 量化分析预测股灾拐点【6-5】\n观看链接：https://live.csdn.net/room/CSDNedu/VNqpTJ0d\n数据分析师必备的的软硬技能【6-16】\n观看链接：https://live.csdn.net/room/CSDNedu/Vc9QDqAH\n提升 Python 数据处理速度四种方式【6-23】\n观看链接：https://live.csdn.net/room/CSDNedu/TN5hZHwn\n从数据专员到行业 “叫兽”，必备经历【6-12】\n观看链接：https://live.csdn.net/room/CSDNedu/fZUy43xw\n用 40 行 Python 代码实现抖音 AI 换脸【5-29】\n观看链接：https://live.csdn.net/room/CSDNedu/A9jwFMBm\n用 2 个小时写一个 CSDN【6-10】\n观看链接：https://live.csdn.net/room/CSDNedu/BrqBSfMn\n0 基础快速上手推荐系统【6-22】\n观看链接：https://live.csdn.net/room/CSDNedu/5BDkcYfI\n实战：CSDN 站内搜索技术关键词\n观看链接：https://live.csdn.net/room/CSDNedu/rq27wEHR\n文档资料链接:\n https://pan.baidu.com/s/1HtKPV44xsTAq0L69GqkVzA\n提取码: jhpv\n","tags":["Python"]},{"title":"VMWare Esxi 的安装","url":"/2021/05/02/simpread-VMware-ESXi%20%E7%9A%84%E5%AE%89%E8%A3%85_Yixin%20%E7%9A%84%E5%8D%9A%E5%AE%A2%20-%20CSDN%20%E5%8D%9A%E5%AE%A2/","content":"密码账号:USERID/PASSW0RD密码的 0 是数字零\n\n\n  选择 ESXI 的镜像，挂载成功。\n\n\n然后重新启动，选择驱动引导：\n在合适的时候按 F1，出现如下界面\n\n按空格选择设置 IP。之后就可以访问了。\n","tags":["VMware"]},{"title":"VMWare VSAN 的安装","url":"/2021/05/02/simpread-VSAN%20%E7%9A%84%E5%AE%89%E8%A3%85_Yixin%20%E7%9A%84%E5%8D%9A%E5%AE%A2%20-%20CSDN%20%E5%8D%9A%E5%AE%A2/","content":"\n本文由 简悦 SimpRead 转码， 原文地址 blog.csdn.net\n\n将 VCenter 安装在任何一台主机上（192.168.30.2，192.168.30.3，192.168.30.4）这周（7 月 28 号）教我了 VSAN 的知识，交我一个任务作业。他给我了 3 个 XCC 地址，有 3 台装了 ESXI 的主机，让我装 VSAN。跟以往不同的地方是，这次让我把 Vcenter 装在这三台主机中的其一，主机里边。以往都是装在主机外的，用来管理主机。就遇到这个问题。\n2020 年 0802\n刚开始找不到 VSAN，6.5 有 html5 和 flash 两种访问方式，html5 在 6.5 中功能不全。\n\n","tags":["VMware"]},{"title":"VSAN6.7 的安装","url":"/2021/05/02/simpread-VSAN6.7%20%E7%9A%84%E5%AE%89%E8%A3%85_Yixin%20%E7%9A%84%E5%8D%9A%E5%AE%A2%20-%20CSDN%20%E5%8D%9A%E5%AE%A2/","content":"\n图 1\n\n 图 2\n 图 3\n 图 4\n 图 5\n 图 6\n 图 7\n 图 8\n 图 9\n 图 10\n 图 11\n 图 12\n 图 13\n 图 14\n 图 15\n\n选择要安装在哪个主机上。\n\n 图 16\n 图 17\n\n注意，可以选择安装在包含目标主机的新 VSAN 群集上\n\n 图 18\n 图 19\n\n这是因为，因为之前的磁盘上面已经有 VSAN 的信息了，得去 ESXI 后台把这些磁盘的分区删了\n\n 图 20\n\n点击了按照容量降序\n\n 图 21\n\n从上面往下面弄，右键删除磁盘分区，下面三个不用管就行了。只弄上边 8 个，也就是 6 个 HDD 和 2 个 960g 的 SSD.\n\n 图 22\n 图 23\n\n其他两台也要这么做一下。像这种就是需要删除的。\n\n 图 24\n\n擦除后是这个样子的。\n\n 图 25\n\n 然后重新进入 Vcenter 安装第 8 步，发现有磁盘可选。\n\n 图 26\n\n检查一下，是不是八块硬盘。这里只会显示 30.11 这台机器（Vcenter 是装在 192.168.30.11 的）\n\n 图 27\n 图 28\n\n这个时候注意，需要设置一下 VM network VLAN ，在 30.11（装 VC 的主机）主机的后台，\n\n​\n图 29\n 图 30\n\n其他地方不用管，刷新一下就 OK。\n\n 图 31\n 图 32\n 图 33\n 图 34\n 图 35\n 图 36\n 图 37\n 图 38\n 图 39\n\n完了就会发现浏览器里边没有 “不安全” 的字样了。\n\n 图 40\n\n目前准备把其他的主机也加载进来。\n\n 图 41\n\n加完三台主机后发现一点问题，30.11 机器报错。其他 VSAN 网络不可用。\n\n 图 42\n","tags":["VMware"]},{"title":"Vim","url":"/2021/05/02/simpread-Vim_Yixin%20%E7%9A%84%E5%8D%9A%E5%AE%A2%20-%20CSDN%20%E5%8D%9A%E5%AE%A2/","content":"按 [i] 键可以进入到编辑状态，显示 insert 字眼 OK。\n直接按 esc 退出编辑状态，然后输入 ：wq !  保存退出\n：wq ！ 保存后退出\n：w        表示保存不退出\n：q !      表示退出不 保存 \n： ！      表示强制退出忙，或者按 ctrl + z 强制退出也可！\n","tags":["Linux"]},{"title":"go语言学习","url":"/2021/05/02/simpread-go%20%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0_Yixin%20%E7%9A%84%E5%8D%9A%E5%AE%A2%20-%20CSDN%20%E5%8D%9A%E5%AE%A2/","content":"第二天这里加了命令行参数，他是以输出的形式输出了命令行参数。\n[C:\\Users\\mengyx3\\AppData\\Local\\Temp\\go-build833694214\\b001\\exe\\hello_world.exe 是二进制的命令， chao 是命令行参数了。\n\npackage mainimport (   “fmt”   “os”)func main() {   fmt.Println(os.Args)   fmt.Println(“Hello World”)   os.Exit(-1)}\n运行程序，我们看到命令行参数被放在了 hello world 的后面。\n编写测试程序\n\n 源码文件以_test 结尾：xxx_test . go\n 测试方法名以 Test 开头：func TestXXX(t *testing.T) {…}\n\n斐波那契数列\n也可以改写成\n还可以改写成\n刚刚都是用的 fmt.Print 来输出的，其实在单元测试可以用 t.Log 来输出。\nGo 语言里交换变量的值写法简洁，可以在一句赋值语句里边 对多个变量进行赋值。\n位运算\n位运算结果这里，应该是三个 true , 也就是 true true true 。而不是 true false true ?\n当前播放：05 | 变量，常量以及与其他语言的差异\n刚刚上面是 a:=7 0111     我们换成 a:=1 0001\n第三天\n 数据类型和指针，不支持隐性的数据类型转换。需要显性数据类型转换。\n\n Go 语言可以支持指针类型，但是不支持指针运算。\n\n Go 的字符串是值类型，默认初始化零值是空字符串，而不是空。\n\n\n第四天用 == 比较数组\n\n 相同维数且含有相同个数元素的数组才可以比较\n\n 每个元素都相同才相等。\n\n 按位置零\n\n\n第五天\n 条件和循环\n\n","tags":["golang"]},{"title":"Windows 内核和 Linux 内核谁更复杂","url":"/2021/05/04/simpread-Windows%20%E5%86%85%E6%A0%B8%E5%92%8C%20Linux%20%E5%86%85%E6%A0%B8%E8%B0%81%E6%9B%B4%E5%A4%8D%E6%9D%82_/","content":"两个系统的内核结构不一样，没什么可比性，都有各自的优势。\nLinux 内核和 Windows 内核有什么区别？\n内核什么是内核呢？\n计算机是由各种外部硬件设备组成的，比如内存、cpu、硬盘等，如果每个应用都要和这些硬件设备对接通信协议，那这样太累了，所以这个中间人就由内核来负责，让内核作为应用连接硬件设备的桥梁，应用程序只需关心与内核交互，不用关心硬件的细节。\n\n内核有哪些能力呢？\n现代操作系统，内核一般会提供 4 个基本能力：\n\n  管理进程、线程，决定哪个进程、线程使用 CPU，也就是进程调度的能力；\n  管理内存，决定内存的分配和回收，也就是内存管理的能力；\n  管理硬件设备，为进程与硬件设备之间提供通信能力，也就是硬件通信能力；\n  提供系统调用，如果应用程序要运行更高权限运行的服务，那么就需要有系统调用，它是用户程序与操作系统之间的接口。\n\n内核是怎么工作的？\n内核具有很高的权限，可以控制 cpu、内存、硬盘等硬件，而应用程序具有的权限很小，因此大多数操作系统，把内存分成了两个区域：\n\n  内核空间，这个内存空间只有内核程序可以访问；\n  用户空间，这个内存空间专门给应用程序使用；\n\n用户空间的代码只能访问一个局部的内存空间，而内核空间的代码可以访问所有内存空间。因此，当程序使用用户空间时，我们常说该程序在用户态执行，而当程序使内核空间时，程序则在内核态执行。\n应用程序如果需要进入内核空间，就需要通过系统调用，下面来看看系统调用的过程：\n\n内核程序执行在内核态，用户程序执行在用户态。当应用程序使用系统调用时，会产生一个中断。发生中断后， CPU 会中断当前在执行的用户程序，转而跳转到中断处理程序，也就是开始执行内核程序。内核处理完后，主动触发中断，把 CPU 执行权限交回给用户程序，回到用户态继续工作。\nLinux 的设计Linux 的开山始祖是来自一位名叫 Linus Torvalds 的芬兰小伙子，他在 1991 年用 C 语言写出了第一版的 Linux 操作系统，那年他 22 岁。\n完成第一版 Linux 后，Linux Torvalds 就在网络上发布了 Linux 内核的源代码，每个人都可以免费下载和使用。\nLinux 内核设计的理念主要有这几个点：\n\n  _MutiTask_，多任务\n  _SMP_，对称多处理\n  _ELF_，可执行文件链接格式\n  _Monolithic Kernel_，宏内核\n\nMutiTaskMutiTask 的意思是多任务，代表着 Linux 是一个多任务的操作系统。\n多任务意味着可以有多个任务同时执行，这里的「同时」可以是并发或并行：\n\n  对于单核 CPU 时，可以让每个任务执行一小段时间，时间到就切换另外一个任务，从宏观角度看，一段时间内执行了多个任务，这被称为并发。\n  对于多核 CPU 时，多个任务可以同时被不同核心的 CPU 同时执行，这被称为并行。\n\nSMPSMP 的意思是对称多处理，代表着每个 CPU 的地位是相等的，对资源的使用权限也是相同的，多个 CPU 共享同一个内存，每个 CPU 都可以访问完整的内存和硬件资源。\n这个特点决定了 Linux 操作系统不会有某个 CPU 单独服务应用程序或内核程序，而是每个程序都可以被分配到任意一个 CPU 上被执行。\nELFELF 的意思是可执行文件链接格式，它是 Linux 操作系统中可执行文件的存储格式，你可以从下图看到它的结构：\n\nELF 把文件分成了一个个分段，每一个段都有自己的作用，具体每个段的作用这里我就不详细说明了，感兴趣的同学可以去看《程序员的自我修养——链接、装载和库》这本书。\n另外，ELF 文件有两种索引，Program header table 中记录了「运行时」所需的段，而 Section header table 记录了二进制文件中各个「段的首地址」。\n那 ELF 文件怎么生成的呢？\n我们编写的代码，首先通过「编译器」编译成汇编代码，接着通过「汇编器」变成目标代码，也就是目标文件，最后通过「链接器」把多个目标文件以及调用的各种函数库链接起来，形成一个可执行文件，也就是 ELF 文件。\n那 ELF 文件是怎么被执行的呢？\n执行 ELF 文件的时候，会通过「装载器」把 ELF 文件装载到内存里，CPU 读取内存中的指令和数据，于是程序就被执行起来了。\nMonolithic KernelMonolithic Kernel 的意思是宏内核，Linux 内核架构就是宏内核，意味着 Linux 的内核是一个完整的可执行程序，且拥有最高的权限。\n宏内核的特征是系统内核的所有模块，比如进程调度、内存管理、文件系统、设备驱动等，都运行在内核态。\n不过，Linux 也实现了动态加载内核模块的功能，例如大部分设备驱动是以可加载模块的形式存在的，与内核其他模块解藕，让驱动开发和驱动加载更为方便、灵活。\n\n与宏内核相反的是微内核，微内核架构的内核只保留最基本的能力，比如进程调度、虚拟机内存、中断等，把一些应用放到了用户空间，比如驱动程序、文件系统等。这样服务与服务之间是隔离的，单个服务出现故障或者完全攻击，也不会导致整个操作系统挂掉，提高了操作系统的稳定性和可靠性。\n微内核内核功能少，可移植性高，相比宏内核有一点不好的地方在于，由于驱动程序不在内核中，而且驱动程序一般会频繁调用底层能力的，于是驱动和硬件设备交互就需要频繁切换到内核态，这样会带来性能损耗。华为的鸿蒙操作系统的内核架构就是微内核。\n还有一种内核叫混合类型内核，它的架构有点像微内核，内核里面会有一个最小版本的内核，然后其他模块会在这个基础上搭建，然后实现的时候会跟宏内核类似，也就是把整个内核做成一个完整的程序，大部分服务都在内核中，这就像是宏内核的方式包裹着一个微内核。\nWindows 设计当今 Windows 7、Windows 10 使用的内核叫 Windows NT，NT 全称叫 New Technology。\n下图是 Windows NT 的结构图片：\n\nWindows 和 Linux 一样，同样支持 MutiTask 和 SMP，但不同的是，Window 的内核设计是混合型内核，在上图你可以看到内核中有一个 MicroKernel 模块，这个就是最小版本的内核，而整个内核实现是一个完整的程序，含有非常多模块。\nWindows 的可执行文件的格式与 Linux 也不同，所以这两个系统的可执行文件是不可以在对方上运行的。\nWindows 的可执行文件格式叫 PE，称为可移植执行文件，扩展名通常是.exe、.dll、.sys等。\nPE 的结构你可以从下图中看到，它与 ELF 结构有一点相似。\n\n总结对于内核的架构一般有这三种类型：\n\n  宏内核，包含多个模块，整个内核像一个完整的程序；\n  微内核，有一个最小版本的内核，一些模块和服务则由用户态管理；\n  混合内核，是宏内核和微内核的结合体，内核中抽象出了微内核的概念，也就是内核中会有一个小型的内核，其他模块就在这个基础上搭建，整个内核是个完整的程序；\n\nLinux 的内核设计是采用了宏内核，Window 的内核设计则是采用了混合内核。\n这两个操作系统的可执行文件格式也不一样， Linux 可执行文件格式叫作 ELF，Windows 可执行文件格式叫作 PE。\n参考资料\n\n https://en.wikipedia.org/wiki/Monolithic_kernel\n https://en.wikipedia.org/wiki/Executable_and_Linkable_Format\n https://en.wikipedia.org/wiki/Windows_NT\n\n","tags":["Linux"]},{"title":"从0开始装VSAN","url":"/2021/05/02/simpread-%E4%BB%8E%200%20%E5%BC%80%E5%A7%8B%E5%AE%89%E8%A3%85%20VSAN%20%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95_Yixin%20%E7%9A%84%E5%8D%9A%E5%AE%A2%20-%20CSDN%20%E5%8D%9A%E5%AE%A2_vsan%20%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/","content":"\n请务必格式化好全部的硬盘，否则可能会出现配置好了但是不能使用的问题。  \n安装 VCSA 可能会卡 80% 参考网上解决。（有可能实际上是等待不够久，并不会出现进度条不会动的情况）  \n注意好安装环境的物理网络情况，确保过程中的通信。  \nEVC 开启的话选择最新的 CPU 微架构\n\nPartition1 - install ESXi进入 xcc 选择 ESXi 镜像，挂载，重启。根据 installer 提示完成 ESXi 安装（在本次实验环境下\nPartition2 - deploy VCSA onto new vSAN cluster打开安装镜像，选择对应的安装程序，在选择 datastore 的时候选择安装在一个新的 vSAN 群集里，剩下的按照需求配置好\nParition3 - 修理剩下的错误\n\n  将其余的 vSAN 主机添加到群集中。\n  在每个主机上配置专用的 vSAN vmkernel。\n  将磁盘从其他主机添加到 vSAN 磁盘组。\n  一切正常运行后，确保运行了 vSAN Health Check，并且不要忽略任何错误！\n\nUPGRADING TO VCENTER 7.0 VIA CLI将 vSAN 群集从一个 vCenter Server 移至另一个 vCenter Server (2151610)\n如果 vCenter Server 虚拟机属于同一群集，如何启用 EVC（1013111）\n","tags":["VMware"]},{"title":"优秀科学论文","url":"/2021/05/02/simpread-%E4%BC%98%E7%A7%80%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E6%96%87%E7%AB%A0%E6%B1%87%E9%9B%86_Yixin%20%E7%9A%84%E5%8D%9A%E5%AE%A2%20-%20CSDN%20%E5%8D%9A%E5%AE%A2/","content":"看到几篇不错的文章。这里做一个记录。\n\n 云计算简史（完整版）\n 图解：网络硬件的发展史\n 为 Navicat 正名，Navicat 完全使用手册（下）\n\n","tags":["论文"]},{"title":"交付技能培养过程","url":"/2021/05/02/simpread-%E4%BA%A4%E4%BB%98%E6%8A%80%E8%83%BD%E5%9F%B9%E5%85%BB%E8%BF%87%E7%A8%8B_Yixin%20%E7%9A%84%E5%8D%9A%E5%AE%A2%20-%20CSDN%20%E5%8D%9A%E5%AE%A2/","content":"交付技能培养过程从 2020 年 6 月正式入职联想，刚开始在 PS 东区交付组，方向为专家服务。后面换了方向。记录一下前辈对于我，在专家服务方向的培养历程。\n2020/7/7 讲解虚拟化的整体架构，如何安装虚拟机。进行测试环境的虚拟机安装实验。\n2020/7/14 回顾虚拟化整体架构，虚拟化网络架构巩固，讲解 / 实操 ESXi 安装，vcenter 安装（手册学习）\n2020/7/21 回顾 VMware ESXi/vCenter 安装步骤，虚拟化网络架构。\n2020/7/22 进行 VMware 集群配置讲解 –HA/DRS/EVC / 标准交换机 / 分布式交换机 / SSO 设置 / License 设置 / NTP 配置 / vCenter 系统管理。\n2020/7/28 回顾 VMware 网络架构，集群配置。\n2020/7/29 讲解 vSAN 原理和部署过程，布置作业，整体部署一套 VMware 环境。\n2020/8/11 回顾整个 VMware 的内容。\n2020/8/13 讲解微软 AD 的架构，包括 domain controller，DNS，DHCP。\n","tags":["学习"]},{"title":"新年期望","url":"/2021/05/02/simpread-%E6%96%B0%E5%B9%B4%E6%9C%9F%E6%9C%9B_Yixin%20%E7%9A%84%E5%8D%9A%E5%AE%A2%20-%20CSDN%20%E5%8D%9A%E5%AE%A2/","content":"\n本文由 简悦 SimpRead 转码， 原文地址 blog.csdn.net\n\n1， 云原生开发 ： K8S， Docker , DevOps , Jenkins， Prometheus ，Rancher\n2， 微服务架构:    SpringBoot，微服务。\n3， 开发 ：           Vue，Golang , Python 高阶\n4， infra ：          计算机网络（CCNA，IP 规划)\n5,    项目经理：    PMO， PMP\n2021.02.26\n","tags":["学习"]},{"title":"好看的几个CSDN背景图","url":"/2021/05/02/simpread-%E6%AF%94%E8%BE%83%E5%A5%BD%E7%9C%8B%E7%9A%84%E5%87%A0%E4%B8%AA%20CSDN%20%E7%9A%84%E8%83%8C%E6%99%AF%E5%9B%BE_Yixin%20%E7%9A%84%E5%8D%9A%E5%AE%A2%20-%20CSDN%20%E5%8D%9A%E5%AE%A2_csdn%20%E7%9A%84%E8%83%8C%E6%99%AF%E5%9B%BE/","content":"以下是比较好看的  CSDN 背景图\n保存一下\nhttps://blog.csdn.net/qq_36650546\nhttps://blog.csdn.net/weixin_54225634https://blog.csdn.net/weixin_45157820\nhttps://blog.csdn.net/eastmount?spm=1000.2115.3001.4128\n","tags":["喜欢"]},{"title":"-联想 XC 服务器命名规范","url":"/2021/05/02/simpread-%E8%81%94%E6%83%B3%20XC%20%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83_Yixin%20%E7%9A%84%E5%8D%9A%E5%AE%A2%20-%20CSDN%20%E5%8D%9A%E5%AE%A2/","content":"\n","tags":["学习"]},{"title":"深度学习有哪些好玩且易于实现的论文？","url":"/2021/11/12/simpread-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%9C%89%E5%93%AA%E4%BA%9B%E5%A5%BD%E7%8E%A9%E7%9A%84%E4%B8%94%E6%98%93%E4%BA%8E%E5%AE%9E%E7%8E%B0%E7%9A%84%E8%AE%BA%E6%96%87%EF%BC%9F%2020211114/","content":"\nGitHub 上发现了一个不错的项目，收集了中国科学技术大学课程资源，主要包括了计算机学院，也包括经管、经济、物理、数学等相关课程的 repo，甚至包含了人文社科类的。目前该项目已收获了 13716 个 Star，4221 个 Fork。课程的结构大致如下：\nhttps://ustc-resource.github.io/USTC-Course/\n有很多\nMachine Learning solutions in AWS Marketplace\n亚马逊的机器学习的博客\nAWS Marketplace\n2019/10/25 再次更新\nLearn Python - Free Interactive Python Tutorial\n优达学城，乔治亚理工学院的课程\n优达学城课程分类_在线视频课程 - 优达学城 (Udacity) 官网\n关于软件和镜像下载源，大家可以看看我这篇回答。管清华和中科大的朋友要的。 清华，中科大，计算机学院下载资源\n2019/10/17 更新 ，基于大家对我的喜爱，我就放两本很好的电子书的链接在上边。深度学习的哦。如果你们给我点赞多一点，或者转发，我会放更多的资料在上边。\nDeep LearningNeural networks and deep learning\n—————————————- 我是分割线 —————————————— 有很多！今天来强答一波。祭出我的月光宝盒来。各位小哥哥，小姐姐，看完记得点个赞哦 (´-ω-`)。还有机器学习大礼包，含 tensorflow 书籍和李航统计学习法，以及斯坦福的课件，大小 400 多 M，有需要的小宝贝私聊我就好。！(上传百度网盘链接，居然涉及违法违规～)\n1. 网站 https://paperswithcode.com/sota\n\n2. 网站 https://github.com/zziz/pwc/blob/master/README.md#—- ，是这个样子的，和上边差不多。\n\n3. 还有视频，讲神经网络的，附 YouTube 链接 https://www.youtube.com/watch?v=aircAruvnKk\n\n4. 以及_DeepLearning-500-questions，_https://github.com/scutan90/DeepLearning-500-questions 深度学习 500 问，以问答形式对常用的概率知识、线性代数、机器学习、深度学习、计算机视觉等热点问题进行阐述，以帮助自己及有需要的读者。\n\n5. 以及莫烦小哥的 python https://morvanzhou.github.io/tutorials/machine-learning/tensorflow/\n\n6. 这个是思科的，Welcome to Deep Learning NLP documentation!\n\n7. 这网站非常硬核，讲的清楚，而且很干净漂亮。还有 python 跟 R 的内容代码https://ujjwalkarn.me/2016/08/11/intuitive-explanation-convnets/\n\n\n\n还有一个开放的社区，会定期讨论大家最近在看什么文章，机器学习相关的项目。前两天还让我投票，说是发起了请愿书，让大家呼吁不要去美国开 AI 的国际会议。https://www.reddit.com/r/MachineLearning/\n\n\n\n还有中科大的这个教程，从人工智能到区块链应有尽有\n\n\n给大家放上几本好书，推荐！\n\n","tags":["学习"]},{"title":"精选链接","url":"/2021/11/14/%E9%87%8D%E8%A6%81%E9%93%BE%E6%8E%A5/","content":"中国科学技术大学开源镜像资源：http://mirrors.ustc.edu.cn/\n清华大学开源镜像： https://mirrors.tuna.tsinghua.edu.cn/\n各种版本的git:  https://npm.taobao.org/mirrors/git-for-windows/\n人工智能还能最新论文和代码：  https://paperswithcode.com/sota\n各种版本JDK:   https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html\n在线将Excel换成MarkDown：https://tableconvert.com/excel-to-markdown\nC++教程    ：https://hackingcpp.com/\n莫凡Python：  https://mofanpy.com/\n英特尔® 至强® 可扩展处理器 - 查看全新一代至强处理器：\nhttps://www.intel.cn/content/www/cn/zh/products/details/processors/xeon/scalable.html\n！！英特尔® 产品规格对比 至强处理器！！：https://ark.intel.com/content/www/cn/zh/ark/compare.html?productIds=192478,192447,193394,193381\n英特尔工具和实用程序：https://www.intel.cn/content/www/cn/zh/support/topics/utility-tools.html\nVMware常用软件ISO下载汇总（2021年3月更新） – 丁辉博客：https://www.dinghui.org/vmware-iso-download.html\n固件和驱动相关：https://datacentersupport.lenovo.com/cn/zh/\nLenovo硬件信息：https://lenovopress.com/#sort=relevance\n联想ThinkSystem机器安装2008R2详细教程 - 猫先生的日常点滴：https://www.mr-mao.cn/archives/thinksystem-2008.html\n服务器配置的网站和工具： https://dcsc.lenovo.com/#/\nMSDN原版之家：https://msdn.pe8.com/win11.html\nMSDN老版：http://www.msdn1.cn/index.html\nMSDN新版：http://xin.msdn1.cn/\n","tags":["学习"]},{"title":"演示如何确定英特尔 ® 处理器的数量","url":"/2021/11/08/%E5%A6%82%E4%BD%95%E8%AF%86%E5%88%AB%E8%8B%B1%E7%89%B9%E5%B0%94%20%C2%AE%20%E5%A4%84%E7%90%86%E5%99%A8/","content":"\n\n\nDocumentation\nContent Type Identify My Product\nArticle ID 000006059\nThere are different options to get the name and the number of the Intel® Processors. \nThe methods below apply on all Intel® processors such as Intel® Core™, Intel® Xeon®, Intel® Pentium®, Intel® Celeron®, and Intel Atom® processors. \nOption 1: Operating SystemWindows*\n Press on the Windows key  on your keyboard and start typing System, choose System Information which will show Processor information with the name, number, and speed of the processor.\nIf the Windows key is not available on your keyboard, using your mouse, go to the Windows icon located on the bottom-left corner of your screen, right-click, and choose System. Look up the processor’s name and number in the Processor information. The examples below show the case when choosing System Information and System.  \n\nLinux*Type the following command\nlscpu | grep “Model name”\nSee examples:\n\n\nMAC OSType the following command in the terminal app\nsysctl -a | grep machdep.cpu.brand_string\nSee an example:\n\nOption 2: Packaging BoxIf you bought an Intel® Boxed Processor, the information about the number of the processor along with other information like the batch number (FPO) and the serial number (ATPO) are listed on the packaging box.\n\nOption 3: Markings on the ProcessorsThe name and number of the Intel® Processor is listed on the top of the processor. See the example below.\n\nWatch this video to see how to identify your Intel® Processor name and number.\nIdentify the Generation for your Intel® Core™ Processors\nYou can also identify the generation of the processor if your processor is Intel® Core™. The generation of the processor is the first number after i9, i7, i5, or i3.\nHere are some examples:\n\n  Intel® Core™ Processor i7-10710U Processor is 10th generation because the number 10 is listed after i7.\n  Intel® Core™ Processor i9-9900 Processor is 9th generation because the number 9 is listed after i9.\n  Intel® Core™ Processor i7-9850H Processor is 9th generation because the number 9 is listed after i7.\n  Intel® Core™ Processor i5-8600 Processor is 8th generation because the number 8 is listed after i5.\n  Intel® Core™ Processor i3-7350K Processor is 7th generation because the number 7 is listed after i3.\n  Intel® Core™ Processor i5-6400T Processor is 6th generation because the number 6 is listed after i5.\n\n\nClose Window\n","tags":["VMware"]},{"title":"为松江医院开两台虚拟机","url":"/2021/05/02/simpread-%E4%B8%BA%E6%9D%BE%E6%B1%9F%E5%8C%BB%E9%99%A2%E5%BC%80%E9%80%9A%E4%B8%A4%E5%8F%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%20Windows%20Server%202016_Yixin%20%E7%9A%84%E5%8D%9A%E5%AE%A2%20-%20CSDN%20%E5%8D%9A%E5%AE%A2/","content":"需求：\n服务部署计划&nbsp;Windows 操作系统配置编号项目数量（台）操作系统说明&nbsp;1Zookeeper、ElasticSearch、分析服务、规则维护、前置审方（应用）1Windiws注册中心、应用等&nbsp;CPU：3.2GHz * 4 核以上内存：内存 32GB 及以上 ，DDR4 RDIMM硬盘：容量 500G 及以上，SAS 硬盘通讯端口：双端口千兆以太网2数据库集群1Windiws数据库服务&nbsp;合计2　　&nbsp;\n\n\n\n 图 3\n\n\n\n\n\n服务不可用，估计啥服务宕了。\n\n\n\n 查看 Vcenter 报错日志\n\n\n\n\n 只是网卡开通了 DHCP，但是网络中没有 DHCP 服务器。IP 目前为回环地址。\n\n\n\n网关：192.168.5.1(通常)，只要不练外网可以不写。 随便我的，也可以是 192.168.5.254.\n网关就是一个边界。\n\n\n注册中心和应用 \n\n\n开启远程桌面\n https://jingyan.baidu.com/article/154b463136661728ca8f4125.html\n或如下\n\n\n\n安装 VMware tools\n\n","tags":["VMware"]},{"title":"联想SR630服务器","url":"/2021/11/12/simpread-%E8%81%94%E6%83%B3%20SR630%20%E6%9C%8D%E5%8A%A1%E5%99%A8_Yixin%20%E7%9A%84%E5%8D%9A%E5%AE%A2%20-%20CSDN%20%E5%8D%9A%E5%AE%A2/","content":"\n \n \n \n \n \n \n\n","tags":["服务器"]}]